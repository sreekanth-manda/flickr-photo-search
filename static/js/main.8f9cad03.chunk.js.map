{"version":3,"sources":["Utils/Utils.js","Components/Image/Image.js","Components/ImageList/ImageList.js","Components/SearchField/SearchField.js","Constants/Constants.js","Services/FlickrService.js","Components/FullImage/FullImage.js","App.js","serviceWorker.js","index.js"],"names":["getImageUrl","_ref","farm","server","id","secret","concat","isScrollAreaAvailable","undefined","window","pageYOffset","document","documentElement","body","parentNode","scrollTop","html","Math","max","scrollHeight","offsetHeight","clientHeight","getDocumentHeight","innerHeight","Image","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleImageClick","bind","assertThisInitialized","event","preventDefault","onImageClick","image","react_default","a","createElement","className","src","onClick","alt","React","Component","ImageList","images","hideFullImage","map","idx","Components_Image_Image","key","shortid","generate","SearchField","searchText","onSearchInputChange","type","value","onChange","placeholder","BASE_URL","FlickrService","page","method","url","request","get","timeout","photoId","FullImage","flickrGetPhotoInfo","handleKeyPress","state","imageMetaData","loading","_this2","setState","flickerService","then","jsonResp","data","photo","owner","realname","dates","taken","tags","tag","reduce","acc","item","push","raw","catch","err","console","log","class","dateTaken","App","imageList","pageNumber","error","showFullImage","currentImage","handleScroll","addEventListener","throttle","removeEventListener","promises","flickrServices","photos","forEach","Promise","all","evt","_this3","target","imageData","Components_SearchField_SearchField","ref","length","Components_ImageList_ImageList","Components_FullImage_FullImage","Boolean","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f9cad03.chunk.js","sourcesContent":["export const getImageUrl = ({ farm, server, id, secret }) => (\n  `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n);\n\nexport const getDocumentHeight = () => {\n  const body = document.body;\n  const html = document.documentElement;\n\n  return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n};\n\n/* Return scrollTop height: The pixels value which is above the visible scrollable area */\nexport const getScrollTop = () => {\n  return window.pageYOffset !== undefined\n    ? window.pageYOffset\n    : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n};\n\n/* Check if scroll reached bottom */\nexport const isScrollAreaAvailable = () => getScrollTop() < getDocumentHeight() - window.innerHeight;\n","import React from 'react';\nimport { getImageUrl } from '../../Utils/Utils';\nimport './Image.scss';\n\nclass Image extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleImageClick = this.handleImageClick.bind(this);\n  }\n\n  handleImageClick(event) {\n    event.preventDefault();\n    this.props.onImageClick(this.props.image);\n  }\n\n  render() {\n    return (\n      <div className=\"image-item\">\n        <img className=\"image\" src={getImageUrl(this.props.image)} onClick={this.handleImageClick} alt=\"\" />\n      </div>\n    );\n  }\n}\n\nexport default Image;","import React from \"react\";\nimport shortid from 'shortid';\nimport Image from '../Image/Image';\nimport './ImageList.scss';\n\nconst ImageList = ({ images, onImageClick, hideFullImage }) => (\n  <div className=\"image-list\">\n    {images.map((image, idx) => <Image key={shortid.generate()} image={image} onImageClick={onImageClick} />)}\n  </div>\n);\n\nexport default ImageList;\n","import React from 'react';\nimport './SearchField.scss';\n\nconst SearchField = ({ searchText, onSearchInputChange }) => (\n  <input\n    type=\"text\"\n    className=\"search-input\"\n    value={searchText}\n    onChange={onSearchInputChange}\n    placeholder=\"Search images here\"\n  />\n);\n\nexport default SearchField;","const API_KEY = '9c3ef160633df475e4adc64f1b7cf7aa';\nexport const BASE_URL =`https://api.flickr.com/services/rest/?format=json&nojsoncallback=1&api_key=${API_KEY}`;\nexport const TIMEOUT = '15000';\n","import request from 'superagent';\nimport { BASE_URL, TIMEOUT } from '../Constants/Constants';\n\nconst searchFlickrImages = (searchText, page) => {\n  const method = 'flickr.photos.search';\n  const url = page\n    ? `${BASE_URL}&method=${method}&text=${searchText}&per_page=50&page=${page}`\n    : `${BASE_URL}&method=${method}&text=${searchText}&per_page=50`;\n\n  return request\n    .get(url)\n    .timeout(TIMEOUT);\n};\n\nconst getPhoto = (url) => {\n  return request\n    .get(url)\n    .timeout(TIMEOUT);\n}\n\nconst getPhotoInfo = (photoId) => {\n  const method = 'flickr.photos.getInfo';\n  const url = `${BASE_URL}&method=${method}&photo_id=${photoId}`;\n  return request\n    .get(url)\n    .timeout(TIMEOUT);\n}\n\nexport default {\n  searchFlickrImages,\n  getPhoto,\n  getPhotoInfo\n};\n","import React from 'react';\nimport shortid from 'shortid';\nimport { getImageUrl } from '../../Utils/Utils';\nimport flickerService from '../../Services/FlickrService';\nimport './FullImage.scss';\n\nclass FullImage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.flickrGetPhotoInfo = this.flickrGetPhotoInfo.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.state = {\n      imageMetaData: {},\n      loading: false\n    };\n  }\n\n  flickrGetPhotoInfo() {\n    this.setState({ loading: true });\n\n    return flickerService.getPhotoInfo(this.props.image.id)\n      .then(jsonResp => {\n        const data = {};\n        data['owner'] = jsonResp.body.photo.owner.realname;\n        data['dateTaken'] = jsonResp.body.photo.dates.taken;\n\n        const tags = jsonResp.body.photo.tags.tag.reduce((acc, item) => {\n          acc.push(item.raw);\n          return acc;\n        }, [])\n\n        data['tags'] = tags;\n\n        this.setState({ imageMetaData: data, loading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ loading: false });\n      })\n  }\n\n  handleKeyPress(event) {\n    this.props.hideFullImage();\n  }\n\n  componentDidMount() {\n    this.flickrGetPhotoInfo();\n  }\n\n  render() {\n    return (\n      <div className=\"overlay\">\n        <div>\n          <button class=\"close\" onClick={this.handleKeyPress} />\n          <div className=\"full-image\">\n            <div className=\"image-container\">\n              <img src={getImageUrl(this.props.image)} alt=\"\" />\n            </div>\n            <div className=\"image-metadata\">\n              <span>Owner: {this.state.imageMetaData.owner}</span>\n              <span>Date Taken: {this.state.imageMetaData.dateTaken}</span>\n              <div className=\"image-tags\">\n                <span>Tags:</span>\n                <span className=\"tags\">\n                  {\n                    this.state.imageMetaData.tags &&\n                    this.state.imageMetaData.tags.map((item, key) => <span className=\"tag\" key={shortid.generate()}>{item}{','}</span>)\n                  }\n                </span>\n              </div>\n            </div>\n            {this.state.loading && <div className='app-loader' />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FullImage;\n","import React from 'react';\nimport { throttle } from 'throttle-debounce';\nimport ImageList from './Components/ImageList/ImageList';\nimport SearchField from './Components/SearchField/SearchField';\nimport FullImage from './Components/FullImage/FullImage';\nimport flickrServices from './Services/FlickrService';\nimport { isScrollAreaAvailable, getImageUrl } from './Utils/Utils';\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      imageList: [],\n      pageNumber: 1,\n      error: false,\n      loading: false,\n      showFullImage: false,\n      currentImage: {}\n    };\n\n    this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.onImageClick = this.onImageClick.bind(this);\n    this.hideFullImage = this.hideFullImage.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', throttle(800, this.handleScroll));\n  };\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  };\n\n  handleScroll() {\n    const promises = [];\n    const images = [];\n\n    if (!isScrollAreaAvailable()) {\n      this.setState({ loading: true });\n\n      flickrServices.searchFlickrImages(this.state.searchText, this.state.pageNumber + 1)\n        .then(jsonResp => {\n          jsonResp.body.photos.photo.forEach(photo => {\n            promises.push(\n              flickrServices.getPhoto(getImageUrl(photo))\n                .then(() => images.push(photo))\n                .catch((error) => console.log(error))\n            );\n          });\n\n          Promise.all(promises).then(() => {\n            this.setState((state, props) => ({\n              pageNumber: jsonResp.body.photos.page,\n              imageList: state.imageList.concat(images),\n              error: false,\n              loading: false\n            }))\n          });\n        })\n        .catch(err => this.setState({ error: true, loading: false }));\n    }\n  }\n\n  onSearchInputChange(evt) {\n    const searchText = evt.target.value;\n    this.setState({ searchText, loading: true });\n\n    flickrServices.searchFlickrImages(this.state.searchText)\n      .then(jsonResp =>\n        this.setState({\n          imageList: jsonResp.body.photos.photo,\n          error: false,\n          loading: false\n        }))\n      .catch(err => this.setState({ error: true, loading: false }));\n  }\n\n  hideFullImage() {\n    this.setState({ showFullImage: false });\n  }\n\n  onImageClick(imageData) {\n    this.setState({ showFullImage: true, currentImage: imageData });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-header\">\n          <span className=\"app-title\">Flickr Photo Search</span>\n          <SearchField searchText={this.state.searchText} onSearchInputChange={this.onSearchInputChange} />\n        </div>\n        <div className=\"app-content\" ref=\"appContent\">\n          {this.state.imageList.length !== 0 &&\n            <ImageList\n              images={this.state.imageList}\n              onImageClick={this.onImageClick}\n            />\n          }\n          {this.state.loading && <div className='app-loader' />}\n        </div>\n        {this.state.showFullImage && <FullImage hideFullImage={this.hideFullImage} image={this.state.currentImage} />}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}